el double abria que a√±adirlo de alguna manera diferente al float, por lo de ahora lo definia : double "double"doublenum -?[0-9]*"."[0-9]*{doublenum} {yylval.valFloat =(double)atof(yytext);return DOUBLENUM;}
/*cuidado con estas reglas: VOID, BOOL y POW, porque choca con la de abajo si la pongo debajo de esta, esto puede pasar mas adelante con la definicion de otras reglas del estilo string, ya que en si son como string :)
%error-verbose regla para ver errores mas precisos,se mete despues de todas estas vainas de include y demas
xxxxxxxxx mirar porque los strings no estan bien definidos xxxxxxxx
stringval \"[^\t\n]*\" como estaba antes stringval
como estaba antes:


programa : type STRINGV LPAREN RPAREN OPENCURLYBRACKET lines_program CLOSECURLYBRACKET comment {
                char * variables = getVariables(&typelist);

                char * final = malloc(sizeof("#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n\n") + strlen($6) * sizeof(char) + sizeof("\n\n\n return 0;\n}") + strlen(variables) * sizeof(char) + 20);

                strcat(final, $6);
                printf("%s",final);
                $$ = final;
                ;
                
                
                }

type : 
        INTEGER {$$ = 0;}
        | FLOAT {$$ = 1;}
        | STRING {$$ = 2;}
        | CHAR {$$ = 3;}
        | BOOLEAN {$$ = 0;}
;

lines_program : 
        line_program lines_program {
                char * final = malloc(strlen($1) * sizeof(char) + strlen($2) * sizeof(char) + sizeof("\n") + 3);
                strcpy(final, $1);
                strcat(final, "\n");
                strcat(final, $2);
                free($1);
                free($2);
                $$ = final;
                }
        | line_program {
                $$ = $1;
                }
;